{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","public/js/store.js","public/js/vendor.js","serviceWorker.js"],"names":[],"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","file":"sw.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\nimport HandleRequest from './vendor';\n\nconst handleRequest = new HandleRequest();\n\nexport const saveCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', 2, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('countries')) {\n      return upgradeDb.createObjectStore('countries');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCountries();\n    return fetchedResponse.then((countries) => {\n      if (!countries.results) {\n        return Promise.reject('Countries could not be fetched from network')\n      }\n      const addCountry = Object.keys(countries.results).map((key) => {\n        const tx = db.transaction('countries', 'readwrite');\n        const countryStore = tx.objectStore('countries');\n        countryStore.put(countries.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCountry);\n    });\n  });\n}\n\nexport const saveCurrencies = () => {\n  const dbPromise = idb.open('currency-converter-db', 2, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currencies')) {\n      return upgradeDb.createObjectStore('currencies');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCurrencies();\n    return fetchedResponse.then((currencies) => {\n      if (!currencies.results) {\n        return Promise.reject('Currencies cannot be fetched from network')\n      }\n      const addCurrency = Object.keys(currencies.results).map((key) => {\n        const tx = db.transaction('currencies', 'readwrite');\n        const currencyStore = tx.objectStore('currencies');\n        currencyStore.put(currencies.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCurrency);\n    });\n  });\n}\n\nexport const saveCurrencyRates = (options) => {\n  const dbPromise = idb.open('currency-converter-db', 3, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currency-rates')) {\n      return upgradeDb.createObjectStore('currency-rates');\n    }\n  });\n  if (typeof options !== 'object' || !options) return;\n  return dbPromise.then((db) => {\n    const addCurrencyRates = Object.keys(options).map((key) => {\n      const tx = db.transaction('currency-rates', 'readwrite');\n      const currencyStore = tx.objectStore('currency-rates');\n      currencyStore.put(options[key], key);\n      return tx.complete\n    });\n    return Promise.resolve(addCurrencyRates);\n  })\n}\n\nexport const getCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', 2);\n  return dbPromise.then(async(db) => {\n    const tx = db.transaction('countries');\n    const countryStore = tx.objectStore('countries');\n    return countryStore.getAll();\n  });\n}\n\nexport const getCurrencies = () => {\n  const dbPromise = idb.open('currency-converter-db', 2);\n  return dbPromise.then(async(db) => {\n    const tx = db.transaction('currencies');\n    const currencyStore = tx.objectStore('currencies');\n    return currencyStore.getAll();\n  });\n}\n\nexport const getCurrencyRate = (fromCurrency, toCurrency) => {\n  const dbPromise = idb.open('currency-converter-db');\n  return dbPromise.then((db) => {\n    let results = {};\n    const tx = db.transaction('currency-rates');\n    const currencyRateStore = tx.objectStore('currency-rates');\n    currencyRateStore.get(`${fromCurrency}_${toCurrency}`)\n      .onsuccess = (e) => {\n        results[`${fromCurrency}_${toCurrency}`] = e.target.result\n      };\n    currencyRateStore.get(`${toCurrency}_${fromCurrency}`)\n      .onsuccess = (e) => {\n        results[`${toCurrency}_${fromCurrency}`] = e.target.result\n      };\n    return results;\n  })\n}\n\nexport default {};","class HandleRequest {\n  constructor() {\n    this.baseUrl = 'https://free.currencyconverterapi.com/api/v5';\n  }\n\n  fetchCountries() {\n    return fetch(`${this.baseUrl}/countries`)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchCurrencies() {\n    return fetch(`${this.baseUrl}/currencies`)\n      .then((response) => {\n        if (!response) return;\n        return response.json();\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra&date=[${startDate}]&endDate=[${endDate}]`\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  convertCurrency(amount, fromCurrency, toCurrency) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra`;\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        const data = response.json();\n        const fromValue = amount * parseFloat(data[`${fromCurrency}_${toCurrency}`]);\n        const toValue = amount * parseFloat(data[`${toCurrency}_${fromCurrency}`]);\n        return {\n          fromValue,\n          toValue,\n          data\n        }\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nexport default HandleRequest;","import idb from 'idb'\r\n\r\nimport {\r\n  saveCountries,\r\n  saveCurrencies,\r\n  saveCurrencyRates,\r\n  getCountries,\r\n  getCurrencies,\r\n  getCurrencyRate\r\n} from './public/js/store';\r\n\r\nconst cacheBasename = 'convert-currency';\r\nconst cacheVersion = 'v3';\r\nconst appCahe = `${cacheBasename}-${cacheVersion}`;\r\n\r\nconst repo = '/CurrencyConverter';\r\n\r\nconst pageSkeleton = [\r\n  `/`,\r\n  `/build/public/js/main.js`,\r\n  `/build/public/js/plot.js`,\r\n  `/build/public/css/bootstrap.min.css`,\r\n  `/build/public/css/style.css`,\r\n  `/build/public/js/utils/jquery-3.2.1.min.js`,\r\n  `/build/public/js/utils/bootstrap.min.js`,\r\n  `/build/public/js/utils/ie-emulation-modes-warning.js`,\r\n  `/build/public/js/utils/ie10-viewport-bug-workaround.js`,\r\n  `/index.html`\r\n]\r\n\r\nself.addEventListener('install', (event) => {\r\n  event.waitUntil(\r\n    caches.open(appCahe).then((cache) => {\r\n      return cache.addAll(pageSkeleton)\r\n    }).then(() => self.skipWaiting())\r\n  )\r\n});\r\n\r\nself.addEventListener('activate', (event) => {\r\n  event.waitUntil(\r\n    caches.keys()\r\n    .then((cacheNames) => {\r\n      const whiteList = cacheNames\r\n        .filter(cacheName => cacheName.indexOf(cacheBasename))\r\n      whiteList.push(appCahe);\r\n      return Promise.all(\r\n        cacheNames.map((key, i) => {\r\n          if (whiteList.indexOf(key) === -1) {\r\n            return caches.delete(cacheNames[i])\r\n          }\r\n        })\r\n      )\r\n    })\r\n    .then(async() => {\r\n      await saveCountries();\r\n      await saveCurrencies();\r\n    })\r\n    .catch(e => console.log(e))\r\n  )\r\n});\r\n\r\nself.addEventListener('fetch', (event) => {\r\n  const url = new URL(event.request.url);\r\n  //fix only-if-cached bug\r\n  if (event.request.cache === 'only-if-cached' &&\r\n    event.request.mode !== 'same-origin') {\r\n    return;\r\n  };\r\n  if (event.request.method !== 'GET') return;\r\n  if (url.hostname === 'free.currencyconverterapi.com') {\r\n    if (url.pathname.endsWith('countries')) {\r\n      event.respondWith(serveCountries(event.request))\r\n      return;\r\n    }\r\n    if (url.pathname.endsWith('currencies')) {\r\n      console.log('url', url)\r\n      event.respondWith(serveCurrencies(event.request))\r\n      return;\r\n    }\r\n    if (url.pathname.endsWith('convert')) {\r\n      const params = url.searchParams.get('q');\r\n      if (params[0].split('_') === params[1].split('_').reverse()) {\r\n        event.respondWith(convertCurrency(event.request))\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  event.respondWith(\r\n    caches.match(event.request)\r\n    .then(response => response || fetch(event.request))\r\n  )\r\n});\r\n\r\nfunction serveCountries(request) {\r\n  const countries = getCountries()\r\n  return countries.then((dbResponse) => {\r\n    const response = new Response(JSON.stringify(dbResponse), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const networkFetch = fetch(request)\r\n      .then(async(networkResponse) => {\r\n        const dbPromise = idb.open('currency-converter-db', 2);\r\n        await dbPromise.then(async(db) => {\r\n          const networkRes = networkResponse.clone();\r\n          await networkRes.json().then((res) => {\r\n            Object.keys(res.results).map((key) => {\r\n              const tx = db.transaction('countries', 'readwrite');\r\n              const countryStore = tx.objectStore('countries');\r\n              countryStore.put(res.results[key], key);\r\n              return tx.complete;\r\n            });\r\n          });\r\n        });\r\n        return networkResponse.json().then(res => res.results);\r\n      });\r\n    return response || networkFetch;\r\n  });\r\n};\r\n\r\nfunction serveCurrencies(request) {\r\n  const currencies = getCurrencies()\r\n  return currencies.then((dbResponse) => {\r\n    const response = new Response(JSON.stringify(dbResponse), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const networkFetch = fetch(request)\r\n      .then(async(networkResponse) => {\r\n        const dbPromise = idb.open('currency-converter-db', 2);\r\n        await dbPromise.then(async(db) => {\r\n          const networkRes = networkResponse.clone();\r\n          await networkRes.json().then((res) => {\r\n            Object.keys(res.results).map((key) => {\r\n              const tx = db.transaction('currencies', 'readwrite');\r\n              const currencyStore = tx.objectStore('currencies');\r\n              currencyStore.put(res.results[key], key);\r\n              return tx.complete;\r\n            });\r\n          });\r\n        });\r\n        return networkResponse.json().then(res => res.results)\r\n      });\r\n    return response || networkFetch;\r\n  });\r\n};\r\n\r\nfunction convertCurrency(request) {\r\n  const url = new URL(request.url);\r\n  const params = url.searchParams.get('q');\r\n  const convParams = params[0].split('_');\r\n  const fromCurrency = convParams[0];\r\n  const toCurrency = convParams[1];\r\n  const convKeys = [`${fromCurrency}_${toCurrency}`, `${toCurrency}_${fromCurrency}`]\r\n  const dbFetch = getCurrencyRate(fromCurrency, toCurrency);\r\n  const networkFetch = fetch(request)\r\n    .then((networkResponse) => {\r\n      saveCurrencyRates(networkResponse.clone().json())\r\n      return networkResponse.json()\r\n    });\r\n  return (Object.keys(dbFetch) !== convKeys) ? networkFetch : dbFetch\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}