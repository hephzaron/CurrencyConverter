{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","public/js/store.js","public/js/vendor.js","serviceWorker.js"],"names":[],"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","file":"sw.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\nimport HandleRequest from './vendor';\n\nconst handleRequest = new HandleRequest();\nconst dbVersion = 3;\n\nexport const saveCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', 1, (upgradeDb) => {\n    console.log(1);\n    if (!upgradeDb.objectStoreNames.contains('countries')) {\n      return upgradeDb.createObjectStore('countries');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCountries();\n    return fetchedResponse.then((countries) => {\n      if (!countries.results) {\n        return Promise.reject('Countries could not be fetched from network')\n      }\n      const addCountry = Object.keys(countries.results).map((key) => {\n        const tx = db.transaction('countries', 'readwrite');\n        const countryStore = tx.objectStore('countries');\n        countryStore.put(countries.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCountry);\n    });\n  });\n}\n\nexport const saveCurrencies = () => {\n  console.log(2);\n  const dbPromise = idb.open('currency-converter-db', 2, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currencies')) {\n      return upgradeDb.createObjectStore('currencies');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCurrencies();\n    return fetchedResponse.then((currencies) => {\n      if (!currencies.results) {\n        return Promise.reject('Currencies cannot be fetched from network')\n      }\n      const addCurrency = Object.keys(currencies.results).map((key) => {\n        const tx = db.transaction('currencies', 'readwrite');\n        const currencyStore = tx.objectStore('currencies');\n        currencyStore.put(currencies.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCurrency);\n    });\n  });\n}\n\nexport const saveCurrencyRates = (options) => {\n  console.log(3)\n  const { amount, fromCurrency, toCurrency } = options;\n  const dbPromise = idb.open('currency-converter-db', dbVersion, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currency-rates')) {\n      return upgradeDb.createObjectStore('currency-rates');\n    }\n  });\n  if (typeof options !== 'object' || !options) return;\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchConversionRates(fromCurrency, toCurrency);\n    return fetchedResponse.then((data) => {\n      const addCurrencyRates = Object.keys(data).map((key) => {\n        const tx = db.transaction('currency-rates', 'readwrite');\n        const currencyStore = tx.objectStore('currency-rates');\n        currencyStore.put(data[key], key);\n        return tx.complete\n      });\n      return Promise.resolve(addCurrencyRates);\n    });\n  })\n}\n\nexport const getCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', dbVersion);\n  return dbPromise.then((db) => {\n    const tx = db.transaction('countries');\n    const countryStore = tx.objectStore('countries');\n    return countryStore.getAll();\n  });\n}\n\nexport const getCurrencies = () => {\n  const dbPromise = idb.open('currency-converter-db', dbVersion);\n  return dbPromise.then((db) => {\n    const tx = db.transaction('currencies');\n    const currencyStore = tx.objectStore('currencies');\n    return currencyStore.getAll();\n  });\n}\n\nexport const getCurrencyRate = (fromCurrency, toCurrency) => {\n  const dbPromise = idb.open('currency-converter-db', dbVersion);\n  return dbPromise.then((db) => {\n    let results = {};\n    const tx = db.transaction('currency-rates');\n    const currencyRateStore = tx.objectStore('currency-rates');\n    currencyRateStore.get(`${fromCurrency}_${toCurrency}`)\n      .onsuccess = (e) => {\n        results[`${fromCurrency}_${toCurrency}`] = e.target.result\n      };\n    currencyRateStore.get(`${toCurrency}_${fromCurrency}`)\n      .onsuccess = (e) => {\n        results[`${toCurrency}_${fromCurrency}`] = e.target.result\n      };\n    console.log('dbResult', results);\n    return results;\n  })\n}\n\nexport default {};","class HandleRequest {\n  constructor() {\n    this.baseUrl = 'https://free.currencyconverterapi.com/api/v5';\n  }\n\n  fetchCountries() {\n    return fetch(`${this.baseUrl}/countries`)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchCurrencies() {\n    return fetch(`${this.baseUrl}/currencies`)\n      .then((response) => {\n        if (!response) return;\n        return response.json();\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra&date=${startDate}&endDate=${endDate}`\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchConversionRates(fromCurrency, toCurrency) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra`;\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nexport default HandleRequest;","import idb from 'idb'\r\n\r\nimport {\r\n  saveCountries,\r\n  saveCurrencies,\r\n  saveCurrencyRates,\r\n  getCountries,\r\n  getCurrencies,\r\n  getCurrencyRate\r\n} from './public/js/store';\r\n\r\nconst cacheBasename = 'convert-currency';\r\nconst cacheVersion = 'v2';\r\nconst dbVersion = 3;\r\nconst appCahe = `${cacheBasename}-${cacheVersion}`;\r\n\r\nconst repo = '/CurrencyConverter';\r\n\r\nconst pageSkeleton = [\r\n  `/`,\r\n  `/build/public/js/main.js`,\r\n  `/build/public/js/plot.js`,\r\n  `/build/public/css/bootstrap.min.css`,\r\n  `/build/public/css/style.css`,\r\n  `/build/public/js/utils/jquery-3.2.1.min.js`,\r\n  `/build/public/js/utils/bootstrap.min.js`,\r\n  `/build/public/js/utils/ie-emulation-modes-warning.js`,\r\n  `/build/public/js/utils/ie10-viewport-bug-workaround.js`,\r\n  `/index.html`\r\n]\r\n\r\nself.addEventListener('install', (event) => {\r\n  event.waitUntil(\r\n    caches.open(appCahe).then((cache) => {\r\n      return cache.addAll(pageSkeleton)\r\n    }).then(() => self.skipWaiting())\r\n  )\r\n});\r\n\r\nself.addEventListener('activate', (event) => {\r\n  event.waitUntil(\r\n    caches.keys()\r\n    .then((cacheNames) => {\r\n      const whiteList = cacheNames\r\n        .filter(cacheName => cacheName.indexOf(cacheBasename))\r\n      whiteList.push(appCahe);\r\n      return Promise.all(\r\n        cacheNames.map((key, i) => {\r\n          if (whiteList.indexOf(key) === -1) {\r\n            return caches.delete(cacheNames[i])\r\n          }\r\n        })\r\n      )\r\n    })\r\n    .then(() => saveCountries()\r\n      .then(() => saveCurrencies()\r\n        .then(() => saveCurrencyRates({\r\n          amount: 1,\r\n          fromCurrency: 'AFN',\r\n          toCurrency: 'AFN'\r\n        }))\r\n      )\r\n    )\r\n    .catch(e => console.log(e))\r\n  )\r\n});\r\n\r\nself.addEventListener('fetch', (event) => {\r\n  const url = new URL(event.request.url);\r\n  //fix only-if-cached bug\r\n  if (event.request.cache === 'only-if-cached' &&\r\n    event.request.mode !== 'same-origin') {\r\n    return;\r\n  };\r\n  if (event.request.method !== 'GET') return;\r\n  if (url.hostname === 'free.currencyconverterapi.com') {\r\n    if (url.pathname.endsWith('countries')) {\r\n      event.respondWith(serveCountries(event.request))\r\n      return;\r\n    }\r\n    if (url.pathname.endsWith('currencies')) {\r\n      console.log('url', url)\r\n      event.respondWith(serveCurrencies(event.request))\r\n      return;\r\n    }\r\n    if (url.pathname.endsWith('convert')) {\r\n      const params = url.searchParams.get('q');\r\n      if (params[0].split('_') === params[1].split('_').reverse()) {\r\n        event.respondWith(convertCurrency(event.request))\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  event.respondWith(\r\n    caches.match(event.request)\r\n    .then(response => response || fetch(event.request))\r\n  )\r\n});\r\n\r\nfunction serveCountries(request) {\r\n  const countries = getCountries()\r\n  return countries.then((dbResponse) => {\r\n    const response = new Response(JSON.stringify(dbResponse), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const networkFetch = fetch(request)\r\n      .then(async(networkResponse) => {\r\n        const dbPromise = idb.open('currency-converter-db', dbVersion);\r\n        await dbPromise.then(async(db) => {\r\n          const networkRes = networkResponse.clone();\r\n          await networkRes.json().then((res) => {\r\n            Object.keys(res.results).map((key) => {\r\n              const tx = db.transaction('countries', 'readwrite');\r\n              const countryStore = tx.objectStore('countries');\r\n              countryStore.put(res.results[key], key);\r\n              return tx.complete;\r\n            });\r\n          });\r\n        });\r\n        return networkResponse.json().then(res => res.results);\r\n      });\r\n    return response || networkFetch;\r\n  });\r\n};\r\n\r\nfunction serveCurrencies(request) {\r\n  const currencies = getCurrencies()\r\n  return currencies.then((dbResponse) => {\r\n    const response = new Response(JSON.stringify(dbResponse), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const networkFetch = fetch(request)\r\n      .then(async(networkResponse) => {\r\n        const dbPromise = idb.open('currency-converter-db', dbVersion);\r\n        await dbPromise.then(async(db) => {\r\n          const networkRes = networkResponse.clone();\r\n          await networkRes.json().then((res) => {\r\n            Object.keys(res.results).map((key) => {\r\n              const tx = db.transaction('currencies', 'readwrite');\r\n              const currencyStore = tx.objectStore('currencies');\r\n              currencyStore.put(res.results[key], key);\r\n              return tx.complete;\r\n            });\r\n          });\r\n        });\r\n        return networkResponse.json().then(res => res.results)\r\n      });\r\n    return response || networkFetch;\r\n  });\r\n};\r\n\r\nfunction convertCurrency(request) {\r\n  const url = new URL(request.url);\r\n  const params = url.searchParams.get('q');\r\n  const convParams = params[0].split('_');\r\n  const fromCurrency = convParams[0];\r\n  const toCurrency = convParams[1];\r\n  const convKeys = [`${fromCurrency}_${toCurrency}`, `${toCurrency}_${fromCurrency}`]\r\n  const dbFetch = getCurrencyRate(fromCurrency, toCurrency);\r\n  return dbFetch.then((dbResponse) => {\r\n    const response = new Response(JSON.stringify(dbResponse), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n    const networkFetch = fetch(request)\r\n      .then(async(networkResponse) => {\r\n        const dbPromise = idb.open('currency-converter-db', dbVersion);\r\n        await dbPromise.then(async(db) => {\r\n          const networkRes = networkResponse.clone();\r\n          await networkRes.json().then((res) => {\r\n            Object.keys(res).map((key) => {\r\n              const tx = db.transaction('currency-rates', 'readwrite');\r\n              const currencyStore = tx.objectStore('currency-rates');\r\n              currencyStore.put(res[key], key);\r\n              return tx.complete;\r\n            });\r\n          });\r\n        });\r\n        return networkResponse.json()\r\n      });\r\n    return (Object.keys(dbResponse) !== convKeys) ? networkFetch : response\r\n  });\r\n}\r\n\r\n//////////"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvaWRiL2xpYi9pZGIuanMiLCJwdWJsaWMvanMvc3RvcmUuanMiLCJwdWJsaWMvanMvdmVuZG9yLmpzIiwic2VydmljZVdvcmtlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDNVRBOzs7O0FBQ0E7Ozs7OztB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LElBQVIsQ0FBYSxVQUFDLFVBQUQsRUFBZ0I7QUFDbEMsUUFBTSxXQUFXLElBQUksUUFBSixDQUFhLEtBQUssU0FBTCxDQUFlLFVBQWYsQ0FBYixFQUF5QztBQUN4RCxlQUFTLEVBQUUsZ0JBQWdCLGtCQUFsQjtBQUQrQyxLQUF6QyxDQUFqQjtBQUdBLFFBQU0sZUFBZSxNQUFNLE9BQU4sRUFDbEIsSUFEa0IsQ0FDYixnQkFBTSxlQUFOLEVBQTBCO0FBQzlCLFVBQU0sWUFBWSxjQUFJLElBQUosQ0FBUyx1QkFBVCxFQUFrQyxTQUFsQyxDQUFsQjtBQUNBLFlBQU0sVUFBVSxJQUFWLENBQWUsZ0JBQU0sRUFBTixFQUFhO0FBQ2hDLFlBQU0sYUFBYSxnQkFBZ0IsS0FBaEIsRUFBbkI7QUFDQSxjQUFNLFdBQVcsSUFBWCxHQUFrQixJQUFsQixDQUF1QixVQUFDLEdBQUQsRUFBUztBQUNwQyxpQkFBTyxJQUFQLENBQVksR0FBWixFQUFpQixHQUFqQixDQUFxQixVQUFDLEdBQUQsRUFBUztBQUM1QixnQkFBTSxLQUFLLEdBQUcsV0FBSCxDQUFlLGdCQUFmLEVBQWlDLFdBQWpDLENBQVg7QUFDQSxnQkFBTSxnQkFBZ0IsR0FBRyxXQUFILENBQWUsZ0JBQWYsQ0FBdEI7QUFDQSwwQkFBYyxHQUFkLENBQWtCLElBQUksR0FBSixDQUFsQixFQUE0QixHQUE1QjtBQUNBLG1CQUFPLEdBQUcsUUFBVjtBQUNELFdBTEQ7QUFNRCxTQVBLLENBQU47QUFRRCxPQVZLLENBQU47QUFXQSxhQUFPLGdCQUFnQixJQUFoQixFQUFQO0FBQ0QsS0Fma0IsQ0FBckI7QUFnQkEsV0FBUSxPQUFPLElBQVAsQ0FBWSxVQUFaLE1BQTRCLFFBQTdCLEdBQXlDLFlBQXpDLEdBQXdELFFBQS9EO0FBQ0QsR0FyQk0sQ0FBUDtBQXNCRDs7QUFFRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiB0b0FycmF5KGFycikge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcnIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKSB7XG4gICAgdmFyIHJlcXVlc3Q7XG4gICAgdmFyIHAgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3QgPSBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3MpO1xuICAgICAgcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBwLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKTtcbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgcC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UHJvcGVydGllcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcm94eUNsYXNzLnByb3RvdHlwZSwgcHJvcCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdLmFwcGx5KHRoaXNbdGFyZ2V0UHJvcF0sIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5faW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhJbmRleCwgJ19pbmRleCcsIFtcbiAgICAnbmFtZScsXG4gICAgJ2tleVBhdGgnLFxuICAgICdtdWx0aUVudHJ5JyxcbiAgICAndW5pcXVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnZ2V0JyxcbiAgICAnZ2V0S2V5JyxcbiAgICAnZ2V0QWxsJyxcbiAgICAnZ2V0QWxsS2V5cycsXG4gICAgJ2NvdW50J1xuICBdKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFtcbiAgICAnb3BlbkN1cnNvcicsXG4gICAgJ29wZW5LZXlDdXJzb3InXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9jdXJzb3IgPSBjdXJzb3I7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoQ3Vyc29yLCAnX2N1cnNvcicsIFtcbiAgICAnZGlyZWN0aW9uJyxcbiAgICAna2V5JyxcbiAgICAncHJpbWFyeUtleScsXG4gICAgJ3ZhbHVlJ1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEN1cnNvciwgJ19jdXJzb3InLCBJREJDdXJzb3IsIFtcbiAgICAndXBkYXRlJyxcbiAgICAnZGVsZXRlJ1xuICBdKTtcblxuICAvLyBwcm94eSAnbmV4dCcgbWV0aG9kc1xuICBbJ2FkdmFuY2UnLCAnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgaWYgKCEobWV0aG9kTmFtZSBpbiBJREJDdXJzb3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgIEN1cnNvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgY3Vyc29yLl9jdXJzb3JbbWV0aG9kTmFtZV0uYXBwbHkoY3Vyc29yLl9jdXJzb3IsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChjdXJzb3IuX3JlcXVlc3QpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICB9XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmNyZWF0ZUluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5jcmVhdGVJbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5pbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ2luZGV4TmFtZXMnLFxuICAgICdhdXRvSW5jcmVtZW50J1xuICBdKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAncHV0JyxcbiAgICAnYWRkJyxcbiAgICAnZGVsZXRlJyxcbiAgICAnY2xlYXInLFxuICAgICdnZXQnLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFtcbiAgICAnZGVsZXRlSW5kZXgnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGlkYlRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fdHggPSBpZGJUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5vYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fdHgub2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fdHgsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhUcmFuc2FjdGlvbiwgJ190eCcsIFtcbiAgICAnb2JqZWN0U3RvcmVOYW1lcycsXG4gICAgJ21vZGUnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhUcmFuc2FjdGlvbiwgJ190eCcsIElEQlRyYW5zYWN0aW9uLCBbXG4gICAgJ2Fib3J0J1xuICBdKTtcblxuICBmdW5jdGlvbiBVcGdyYWRlREIoZGIsIG9sZFZlcnNpb24sIHRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBvbGRWZXJzaW9uO1xuICAgIHRoaXMudHJhbnNhY3Rpb24gPSBuZXcgVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24pO1xuICB9XG5cbiAgVXBncmFkZURCLnByb3RvdHlwZS5jcmVhdGVPYmplY3RTdG9yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbXG4gICAgJ25hbWUnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAnb2JqZWN0U3RvcmVOYW1lcydcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2RlbGV0ZU9iamVjdFN0b3JlJyxcbiAgICAnY2xvc2UnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIERCKGRiKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgfVxuXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24odGhpcy5fZGIudHJhbnNhY3Rpb24uYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoREIsICdfZGInLCBJREJEYXRhYmFzZSwgW1xuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgLy8gQWRkIGN1cnNvciBpdGVyYXRvcnNcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBicm93c2VycyBkbyB0aGUgcmlnaHQgdGhpbmcgd2l0aCBwcm9taXNlc1xuICBbJ29wZW5DdXJzb3InLCAnb3BlbktleUN1cnNvciddLmZvckVhY2goZnVuY3Rpb24oZnVuY05hbWUpIHtcbiAgICBbT2JqZWN0U3RvcmUsIEluZGV4XS5mb3JFYWNoKGZ1bmN0aW9uKENvbnN0cnVjdG9yKSB7XG4gICAgICAvLyBEb24ndCBjcmVhdGUgaXRlcmF0ZUtleUN1cnNvciBpZiBvcGVuS2V5Q3Vyc29yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIShmdW5jTmFtZSBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG5cbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IHRoaXMuX3N0b3JlIHx8IHRoaXMuX2luZGV4O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihxdWVyeSwgY291bnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KCkpO1xuIiwiaW1wb3J0IGlkYiBmcm9tICdpZGInO1xuaW1wb3J0IEhhbmRsZVJlcXVlc3QgZnJvbSAnLi92ZW5kb3InO1xuXG5jb25zdCBoYW5kbGVSZXF1ZXN0ID0gbmV3IEhhbmRsZVJlcXVlc3QoKTtcbmNvbnN0IGRiVmVyc2lvbiA9IDM7XG5cbmV4cG9ydCBjb25zdCBzYXZlQ291bnRyaWVzID0gKCkgPT4ge1xuICBjb25zdCBkYlByb21pc2UgPSBpZGIub3BlbignY3VycmVuY3ktY29udmVydGVyLWRiJywgMSwgKHVwZ3JhZGVEYikgPT4ge1xuICAgIGNvbnNvbGUubG9nKDEpO1xuICAgIGlmICghdXBncmFkZURiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ2NvdW50cmllcycpKSB7XG4gICAgICByZXR1cm4gdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdjb3VudHJpZXMnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYlByb21pc2UudGhlbigoZGIpID0+IHtcbiAgICBjb25zdCBmZXRjaGVkUmVzcG9uc2UgPSBoYW5kbGVSZXF1ZXN0LmZldGNoQ291bnRyaWVzKCk7XG4gICAgcmV0dXJuIGZldGNoZWRSZXNwb25zZS50aGVuKChjb3VudHJpZXMpID0+IHtcbiAgICAgIGlmICghY291bnRyaWVzLnJlc3VsdHMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdDb3VudHJpZXMgY291bGQgbm90IGJlIGZldGNoZWQgZnJvbSBuZXR3b3JrJylcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFkZENvdW50cnkgPSBPYmplY3Qua2V5cyhjb3VudHJpZXMucmVzdWx0cykubWFwKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY291bnRyaWVzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgICBjb25zdCBjb3VudHJ5U3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnY291bnRyaWVzJyk7XG4gICAgICAgIGNvdW50cnlTdG9yZS5wdXQoY291bnRyaWVzLnJlc3VsdHNba2V5XSwga2V5KTtcbiAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFkZENvdW50cnkpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHNhdmVDdXJyZW5jaWVzID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZygyKTtcbiAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ2N1cnJlbmN5LWNvbnZlcnRlci1kYicsIDIsICh1cGdyYWRlRGIpID0+IHtcbiAgICBpZiAoIXVwZ3JhZGVEYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdjdXJyZW5jaWVzJykpIHtcbiAgICAgIHJldHVybiB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2N1cnJlbmNpZXMnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYlByb21pc2UudGhlbigoZGIpID0+IHtcbiAgICBjb25zdCBmZXRjaGVkUmVzcG9uc2UgPSBoYW5kbGVSZXF1ZXN0LmZldGNoQ3VycmVuY2llcygpO1xuICAgIHJldHVybiBmZXRjaGVkUmVzcG9uc2UudGhlbigoY3VycmVuY2llcykgPT4ge1xuICAgICAgaWYgKCFjdXJyZW5jaWVzLnJlc3VsdHMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdDdXJyZW5jaWVzIGNhbm5vdCBiZSBmZXRjaGVkIGZyb20gbmV0d29yaycpXG4gICAgICB9XG4gICAgICBjb25zdCBhZGRDdXJyZW5jeSA9IE9iamVjdC5rZXlzKGN1cnJlbmNpZXMucmVzdWx0cykubWFwKChrZXkpID0+IHtcbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY3VycmVuY2llcycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgY29uc3QgY3VycmVuY3lTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdjdXJyZW5jaWVzJyk7XG4gICAgICAgIGN1cnJlbmN5U3RvcmUucHV0KGN1cnJlbmNpZXMucmVzdWx0c1trZXldLCBrZXkpO1xuICAgICAgICByZXR1cm4gdHguY29tcGxldGU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYWRkQ3VycmVuY3kpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHNhdmVDdXJyZW5jeVJhdGVzID0gKG9wdGlvbnMpID0+IHtcbiAgY29uc29sZS5sb2coMylcbiAgY29uc3QgeyBhbW91bnQsIGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSB9ID0gb3B0aW9ucztcbiAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ2N1cnJlbmN5LWNvbnZlcnRlci1kYicsIGRiVmVyc2lvbiwgKHVwZ3JhZGVEYikgPT4ge1xuICAgIGlmICghdXBncmFkZURiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ2N1cnJlbmN5LXJhdGVzJykpIHtcbiAgICAgIHJldHVybiB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2N1cnJlbmN5LXJhdGVzJyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCAhb3B0aW9ucykgcmV0dXJuO1xuICByZXR1cm4gZGJQcm9taXNlLnRoZW4oKGRiKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hlZFJlc3BvbnNlID0gaGFuZGxlUmVxdWVzdC5mZXRjaENvbnZlcnNpb25SYXRlcyhmcm9tQ3VycmVuY3ksIHRvQ3VycmVuY3kpO1xuICAgIHJldHVybiBmZXRjaGVkUmVzcG9uc2UudGhlbigoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgYWRkQ3VycmVuY3lSYXRlcyA9IE9iamVjdC5rZXlzKGRhdGEpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2N1cnJlbmN5LXJhdGVzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgICBjb25zdCBjdXJyZW5jeVN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2N1cnJlbmN5LXJhdGVzJyk7XG4gICAgICAgIGN1cnJlbmN5U3RvcmUucHV0KGRhdGFba2V5XSwga2V5KTtcbiAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYWRkQ3VycmVuY3lSYXRlcyk7XG4gICAgfSk7XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBnZXRDb3VudHJpZXMgPSAoKSA9PiB7XG4gIGNvbnN0IGRiUHJvbWlzZSA9IGlkYi5vcGVuKCdjdXJyZW5jeS1jb252ZXJ0ZXItZGInLCBkYlZlcnNpb24pO1xuICByZXR1cm4gZGJQcm9taXNlLnRoZW4oKGRiKSA9PiB7XG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY291bnRyaWVzJyk7XG4gICAgY29uc3QgY291bnRyeVN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2NvdW50cmllcycpO1xuICAgIHJldHVybiBjb3VudHJ5U3RvcmUuZ2V0QWxsKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVuY2llcyA9ICgpID0+IHtcbiAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ2N1cnJlbmN5LWNvbnZlcnRlci1kYicsIGRiVmVyc2lvbik7XG4gIHJldHVybiBkYlByb21pc2UudGhlbigoZGIpID0+IHtcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdjdXJyZW5jaWVzJyk7XG4gICAgY29uc3QgY3VycmVuY3lTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdjdXJyZW5jaWVzJyk7XG4gICAgcmV0dXJuIGN1cnJlbmN5U3RvcmUuZ2V0QWxsKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVuY3lSYXRlID0gKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSkgPT4ge1xuICBjb25zdCBkYlByb21pc2UgPSBpZGIub3BlbignY3VycmVuY3ktY29udmVydGVyLWRiJywgZGJWZXJzaW9uKTtcbiAgcmV0dXJuIGRiUHJvbWlzZS50aGVuKChkYikgPT4ge1xuICAgIGxldCByZXN1bHRzID0ge307XG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY3VycmVuY3ktcmF0ZXMnKTtcbiAgICBjb25zdCBjdXJyZW5jeVJhdGVTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdjdXJyZW5jeS1yYXRlcycpO1xuICAgIGN1cnJlbmN5UmF0ZVN0b3JlLmdldChgJHtmcm9tQ3VycmVuY3l9XyR7dG9DdXJyZW5jeX1gKVxuICAgICAgLm9uc3VjY2VzcyA9IChlKSA9PiB7XG4gICAgICAgIHJlc3VsdHNbYCR7ZnJvbUN1cnJlbmN5fV8ke3RvQ3VycmVuY3l9YF0gPSBlLnRhcmdldC5yZXN1bHRcbiAgICAgIH07XG4gICAgY3VycmVuY3lSYXRlU3RvcmUuZ2V0KGAke3RvQ3VycmVuY3l9XyR7ZnJvbUN1cnJlbmN5fWApXG4gICAgICAub25zdWNjZXNzID0gKGUpID0+IHtcbiAgICAgICAgcmVzdWx0c1tgJHt0b0N1cnJlbmN5fV8ke2Zyb21DdXJyZW5jeX1gXSA9IGUudGFyZ2V0LnJlc3VsdFxuICAgICAgfTtcbiAgICBjb25zb2xlLmxvZygnZGJSZXN1bHQnLCByZXN1bHRzKTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQge307IiwiY2xhc3MgSGFuZGxlUmVxdWVzdCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFzZVVybCA9ICdodHRwczovL2ZyZWUuY3VycmVuY3ljb252ZXJ0ZXJhcGkuY29tL2FwaS92NSc7XG4gIH1cblxuICBmZXRjaENvdW50cmllcygpIHtcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9jb3VudHJpZXNgKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpXG4gIH1cblxuICBmZXRjaEN1cnJlbmNpZXMoKSB7XG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuYmFzZVVybH0vY3VycmVuY2llc2ApXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpXG4gIH1cblxuICBmZXRjaEhpc3RvcmljYWxEYXRhKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSwgc3RhcnREYXRlLCBlbmREYXRlKSB7XG4gICAgY29uc3QgcXVlcnkgPSBgJHtmcm9tQ3VycmVuY3l9XyR7dG9DdXJyZW5jeX0sJHt0b0N1cnJlbmN5fV8ke2Zyb21DdXJyZW5jeX1gO1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVybH0vY29udmVydD9xPSR7cXVlcnl9JmNvbXBhY3Q9dWx0cmEmZGF0ZT0ke3N0YXJ0RGF0ZX0mZW5kRGF0ZT0ke2VuZERhdGV9YFxuICAgIHJldHVybiBmZXRjaCh1cmwpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkgcmV0dXJuO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpXG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSlcbiAgfVxuXG4gIGZldGNoQ29udmVyc2lvblJhdGVzKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYCR7ZnJvbUN1cnJlbmN5fV8ke3RvQ3VycmVuY3l9LCR7dG9DdXJyZW5jeX1fJHtmcm9tQ3VycmVuY3l9YDtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9L2NvbnZlcnQ/cT0ke3F1ZXJ5fSZjb21wYWN0PXVsdHJhYDtcbiAgICByZXR1cm4gZmV0Y2godXJsKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhhbmRsZVJlcXVlc3Q7IiwiaW1wb3J0IGlkYiBmcm9tICdpZGInXHJcblxyXG5pbXBvcnQge1xyXG4gIHNhdmVDb3VudHJpZXMsXHJcbiAgc2F2ZUN1cnJlbmNpZXMsXHJcbiAgc2F2ZUN1cnJlbmN5UmF0ZXMsXHJcbiAgZ2V0Q291bnRyaWVzLFxyXG4gIGdldEN1cnJlbmNpZXMsXHJcbiAgZ2V0Q3VycmVuY3lSYXRlXHJcbn0gZnJvbSAnLi9wdWJsaWMvanMvc3RvcmUnO1xyXG5cclxuY29uc3QgY2FjaGVCYXNlbmFtZSA9ICdjb252ZXJ0LWN1cnJlbmN5JztcclxuY29uc3QgY2FjaGVWZXJzaW9uID0gJ3YyJztcclxuY29uc3QgZGJWZXJzaW9uID0gMztcclxuY29uc3QgYXBwQ2FoZSA9IGAke2NhY2hlQmFzZW5hbWV9LSR7Y2FjaGVWZXJzaW9ufWA7XHJcblxyXG5jb25zdCByZXBvID0gJy9DdXJyZW5jeUNvbnZlcnRlcic7XHJcblxyXG5jb25zdCBwYWdlU2tlbGV0b24gPSBbXHJcbiAgYC9gLFxyXG4gIGAvYnVpbGQvcHVibGljL2pzL21haW4uanNgLFxyXG4gIGAvYnVpbGQvcHVibGljL2pzL3Bsb3QuanNgLFxyXG4gIGAvYnVpbGQvcHVibGljL2Nzcy9ib290c3RyYXAubWluLmNzc2AsXHJcbiAgYC9idWlsZC9wdWJsaWMvY3NzL3N0eWxlLmNzc2AsXHJcbiAgYC9idWlsZC9wdWJsaWMvanMvdXRpbHMvanF1ZXJ5LTMuMi4xLm1pbi5qc2AsXHJcbiAgYC9idWlsZC9wdWJsaWMvanMvdXRpbHMvYm9vdHN0cmFwLm1pbi5qc2AsXHJcbiAgYC9idWlsZC9wdWJsaWMvanMvdXRpbHMvaWUtZW11bGF0aW9uLW1vZGVzLXdhcm5pbmcuanNgLFxyXG4gIGAvYnVpbGQvcHVibGljL2pzL3V0aWxzL2llMTAtdmlld3BvcnQtYnVnLXdvcmthcm91bmQuanNgLFxyXG4gIGAvaW5kZXguaHRtbGBcclxuXVxyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgKGV2ZW50KSA9PiB7XHJcbiAgZXZlbnQud2FpdFVudGlsKFxyXG4gICAgY2FjaGVzLm9wZW4oYXBwQ2FoZSkudGhlbigoY2FjaGUpID0+IHtcclxuICAgICAgcmV0dXJuIGNhY2hlLmFkZEFsbChwYWdlU2tlbGV0b24pXHJcbiAgICB9KS50aGVuKCgpID0+IHNlbGYuc2tpcFdhaXRpbmcoKSlcclxuICApXHJcbn0pO1xyXG5cclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIChldmVudCkgPT4ge1xyXG4gIGV2ZW50LndhaXRVbnRpbChcclxuICAgIGNhY2hlcy5rZXlzKClcclxuICAgIC50aGVuKChjYWNoZU5hbWVzKSA9PiB7XHJcbiAgICAgIGNvbnN0IHdoaXRlTGlzdCA9IGNhY2hlTmFtZXNcclxuICAgICAgICAuZmlsdGVyKGNhY2hlTmFtZSA9PiBjYWNoZU5hbWUuaW5kZXhPZihjYWNoZUJhc2VuYW1lKSlcclxuICAgICAgd2hpdGVMaXN0LnB1c2goYXBwQ2FoZSk7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChcclxuICAgICAgICBjYWNoZU5hbWVzLm1hcCgoa2V5LCBpKSA9PiB7XHJcbiAgICAgICAgICBpZiAod2hpdGVMaXN0LmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlcy5kZWxldGUoY2FjaGVOYW1lc1tpXSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICApXHJcbiAgICB9KVxyXG4gICAgLnRoZW4oKCkgPT4gc2F2ZUNvdW50cmllcygpXHJcbiAgICAgIC50aGVuKCgpID0+IHNhdmVDdXJyZW5jaWVzKClcclxuICAgICAgICAudGhlbigoKSA9PiBzYXZlQ3VycmVuY3lSYXRlcyh7XHJcbiAgICAgICAgICBhbW91bnQ6IDEsXHJcbiAgICAgICAgICBmcm9tQ3VycmVuY3k6ICdBRk4nLFxyXG4gICAgICAgICAgdG9DdXJyZW5jeTogJ0FGTidcclxuICAgICAgICB9KSlcclxuICAgICAgKVxyXG4gICAgKVxyXG4gICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSkpXHJcbiAgKVxyXG59KTtcclxuXHJcbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCAoZXZlbnQpID0+IHtcclxuICBjb25zdCB1cmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcclxuICAvL2ZpeCBvbmx5LWlmLWNhY2hlZCBidWdcclxuICBpZiAoZXZlbnQucmVxdWVzdC5jYWNoZSA9PT0gJ29ubHktaWYtY2FjaGVkJyAmJlxyXG4gICAgZXZlbnQucmVxdWVzdC5tb2RlICE9PSAnc2FtZS1vcmlnaW4nKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfTtcclxuICBpZiAoZXZlbnQucmVxdWVzdC5tZXRob2QgIT09ICdHRVQnKSByZXR1cm47XHJcbiAgaWYgKHVybC5ob3N0bmFtZSA9PT0gJ2ZyZWUuY3VycmVuY3ljb252ZXJ0ZXJhcGkuY29tJykge1xyXG4gICAgaWYgKHVybC5wYXRobmFtZS5lbmRzV2l0aCgnY291bnRyaWVzJykpIHtcclxuICAgICAgZXZlbnQucmVzcG9uZFdpdGgoc2VydmVDb3VudHJpZXMoZXZlbnQucmVxdWVzdCkpXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh1cmwucGF0aG5hbWUuZW5kc1dpdGgoJ2N1cnJlbmNpZXMnKSkge1xyXG4gICAgICBjb25zb2xlLmxvZygndXJsJywgdXJsKVxyXG4gICAgICBldmVudC5yZXNwb25kV2l0aChzZXJ2ZUN1cnJlbmNpZXMoZXZlbnQucmVxdWVzdCkpXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh1cmwucGF0aG5hbWUuZW5kc1dpdGgoJ2NvbnZlcnQnKSkge1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgncScpO1xyXG4gICAgICBpZiAocGFyYW1zWzBdLnNwbGl0KCdfJykgPT09IHBhcmFtc1sxXS5zcGxpdCgnXycpLnJldmVyc2UoKSkge1xyXG4gICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKGNvbnZlcnRDdXJyZW5jeShldmVudC5yZXF1ZXN0KSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgZXZlbnQucmVzcG9uZFdpdGgoXHJcbiAgICBjYWNoZXMubWF0Y2goZXZlbnQucmVxdWVzdClcclxuICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlIHx8IGZldGNoKGV2ZW50LnJlcXVlc3QpKVxyXG4gIClcclxufSk7XHJcblxyXG5mdW5jdGlvbiBzZXJ2ZUNvdW50cmllcyhyZXF1ZXN0KSB7XHJcbiAgY29uc3QgY291bnRyaWVzID0gZ2V0Q291bnRyaWVzKClcclxuICByZXR1cm4gY291bnRyaWVzLnRoZW4oKGRiUmVzcG9uc2UpID0+IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRiUmVzcG9uc2UpLCB7XHJcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IG5ldHdvcmtGZXRjaCA9IGZldGNoKHJlcXVlc3QpXHJcbiAgICAgIC50aGVuKGFzeW5jKG5ldHdvcmtSZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRiUHJvbWlzZSA9IGlkYi5vcGVuKCdjdXJyZW5jeS1jb252ZXJ0ZXItZGInLCBkYlZlcnNpb24pO1xyXG4gICAgICAgIGF3YWl0IGRiUHJvbWlzZS50aGVuKGFzeW5jKGRiKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBuZXR3b3JrUmVzID0gbmV0d29ya1Jlc3BvbnNlLmNsb25lKCk7XHJcbiAgICAgICAgICBhd2FpdCBuZXR3b3JrUmVzLmpzb24oKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMocmVzLnJlc3VsdHMpLm1hcCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY291bnRyaWVzJywgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGNvdW50cnlTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdjb3VudHJpZXMnKTtcclxuICAgICAgICAgICAgICBjb3VudHJ5U3RvcmUucHV0KHJlcy5yZXN1bHRzW2tleV0sIGtleSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXR3b3JrUmVzcG9uc2UuanNvbigpLnRoZW4ocmVzID0+IHJlcy5yZXN1bHRzKTtcclxuICAgICAgfSk7XHJcbiAgICByZXR1cm4gcmVzcG9uc2UgfHwgbmV0d29ya0ZldGNoO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gc2VydmVDdXJyZW5jaWVzKHJlcXVlc3QpIHtcclxuICBjb25zdCBjdXJyZW5jaWVzID0gZ2V0Q3VycmVuY2llcygpXHJcbiAgcmV0dXJuIGN1cnJlbmNpZXMudGhlbigoZGJSZXNwb25zZSkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGJSZXNwb25zZSksIHtcclxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgbmV0d29ya0ZldGNoID0gZmV0Y2gocmVxdWVzdClcclxuICAgICAgLnRoZW4oYXN5bmMobmV0d29ya1Jlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ2N1cnJlbmN5LWNvbnZlcnRlci1kYicsIGRiVmVyc2lvbik7XHJcbiAgICAgICAgYXdhaXQgZGJQcm9taXNlLnRoZW4oYXN5bmMoZGIpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG5ldHdvcmtSZXMgPSBuZXR3b3JrUmVzcG9uc2UuY2xvbmUoKTtcclxuICAgICAgICAgIGF3YWl0IG5ldHdvcmtSZXMuanNvbigpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhyZXMucmVzdWx0cykubWFwKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdjdXJyZW5jaWVzJywgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbmN5U3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnY3VycmVuY2llcycpO1xyXG4gICAgICAgICAgICAgIGN1cnJlbmN5U3RvcmUucHV0KHJlcy5yZXN1bHRzW2tleV0sIGtleSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHR4LmNvbXBsZXRlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXR3b3JrUmVzcG9uc2UuanNvbigpLnRoZW4ocmVzID0+IHJlcy5yZXN1bHRzKVxyXG4gICAgICB9KTtcclxuICAgIHJldHVybiByZXNwb25zZSB8fCBuZXR3b3JrRmV0Y2g7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBjb252ZXJ0Q3VycmVuY3kocmVxdWVzdCkge1xyXG4gIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xyXG4gIGNvbnN0IHBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdxJyk7XHJcbiAgY29uc3QgY29udlBhcmFtcyA9IHBhcmFtc1swXS5zcGxpdCgnXycpO1xyXG4gIGNvbnN0IGZyb21DdXJyZW5jeSA9IGNvbnZQYXJhbXNbMF07XHJcbiAgY29uc3QgdG9DdXJyZW5jeSA9IGNvbnZQYXJhbXNbMV07XHJcbiAgY29uc3QgY29udktleXMgPSBbYCR7ZnJvbUN1cnJlbmN5fV8ke3RvQ3VycmVuY3l9YCwgYCR7dG9DdXJyZW5jeX1fJHtmcm9tQ3VycmVuY3l9YF1cclxuICBjb25zdCBkYkZldGNoID0gZ2V0Q3VycmVuY3lSYXRlKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSk7XHJcbiAgcmV0dXJuIGRiRmV0Y2gudGhlbigoZGJSZXNwb25zZSkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGJSZXNwb25zZSksIHtcclxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgbmV0d29ya0ZldGNoID0gZmV0Y2gocmVxdWVzdClcclxuICAgICAgLnRoZW4oYXN5bmMobmV0d29ya1Jlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGJQcm9taXNlID0gaWRiLm9wZW4oJ2N1cnJlbmN5LWNvbnZlcnRlci1kYicsIGRiVmVyc2lvbik7XHJcbiAgICAgICAgYXdhaXQgZGJQcm9taXNlLnRoZW4oYXN5bmMoZGIpID0+IHtcclxuICAgICAgICAgIGNvbnN0IG5ldHdvcmtSZXMgPSBuZXR3b3JrUmVzcG9uc2UuY2xvbmUoKTtcclxuICAgICAgICAgIGF3YWl0IG5ldHdvcmtSZXMuanNvbigpLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhyZXMpLm1hcCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignY3VycmVuY3ktcmF0ZXMnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVuY3lTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdjdXJyZW5jeS1yYXRlcycpO1xyXG4gICAgICAgICAgICAgIGN1cnJlbmN5U3RvcmUucHV0KHJlc1trZXldLCBrZXkpO1xyXG4gICAgICAgICAgICAgIHJldHVybiB0eC5jb21wbGV0ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV0d29ya1Jlc3BvbnNlLmpzb24oKVxyXG4gICAgICB9KTtcclxuICAgIHJldHVybiAoT2JqZWN0LmtleXMoZGJSZXNwb25zZSkgIT09IGNvbnZLZXlzKSA/IG5ldHdvcmtGZXRjaCA6IHJlc3BvbnNlXHJcbiAgfSk7XHJcbn1cclxuXHJcbi8vLy8vLy8vLy8iXX0="}