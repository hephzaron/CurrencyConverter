{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/vendor.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;ACAA;;;;;IAKM,a;AACJ,2BAAc;AAAA;;AACZ,SAAK,OAAL,GAAe,8CAAf;AACD;;AAED;;;;;;;;;;;sCAOkB;AAChB,aAAO,MAAS,KAAK,OAAd,kBACJ,IADI,CACC;AAAA,eAAY,SAAS,IAAT,EAAZ;AAAA,OADD,EAEJ,KAFI,CAEE;AAAA,eAAS,QAAQ,GAAR,CAAY,KAAZ,CAAT;AAAA,OAFF,CAAP;AAGD;;AAED;;;;;;;;;;;;;wCAUoB,Y,EAAc,U,EAAY,S,EAAW,O,EAAS;AAChE,UAAM,QAAW,YAAX,SAA2B,UAA3B,SAAyC,UAAzC,SAAuD,YAA7D;AACA,UAAM,MAAS,KAAK,OAAd,mBAAmC,KAAnC,4BAA+D,SAA/D,iBAAoF,OAA1F;AACA,aAAO,MAAM,GAAN,EACJ,IADI,CACC,UAAC,QAAD,EAAc;AAClB,YAAI,CAAC,QAAL,EAAe;AACf,eAAO,QAAP;AACD,OAJI,EAKJ,KALI,CAKE;AAAA,eAAS,QAAQ,GAAR,CAAY,KAAZ,CAAT;AAAA,OALF,CAAP;AAMD;;AAED;;;;;;;;;;;yCAQqB,Y,EAAc,U,EAAY;AAC7C,UAAM,QAAW,YAAX,SAA2B,UAA3B,SAAyC,UAAzC,SAAuD,YAA7D;AACA,UAAM,MAAS,KAAK,OAAd,mBAAmC,KAAnC,mBAAN;AACA,aAAO,MAAM,GAAN,EACJ,IADI,CACC,UAAC,QAAD,EAAc;AAClB,YAAI,CAAC,QAAL,EAAe;AACf,eAAO,SAAS,IAAT,EAAP;AACD,OAJI,EAKJ,KALI,CAKE;AAAA,eAAS,QAAQ,GAAR,CAAY,KAAZ,CAAT;AAAA,OALF,CAAP;AAMD;;;;;;kBAGY,a","file":"vendor.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * @class HandleRequest\r\n * @description Handle third party based api\r\n * @returns { null }\r\n */\r\nclass HandleRequest {\r\n  constructor() {\r\n    this.baseUrl = 'https://free.currencyconverterapi.com/api/v5';\r\n  }\r\n\r\n  /**\r\n   * @method fetchCurrencies\r\n   * @description fetch currency from newtork\r\n   * @memberof HandleRequest\r\n   * @param { null }\r\n   * @returns { promise } response - network response\r\n   */\r\n  fetchCurrencies() {\r\n    return fetch(`${this.baseUrl}/currencies`)\r\n      .then(response => response.json())\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  /**\r\n   * @method fetchHistoricalData\r\n   * @description fetch currency history from newtork\r\n   * @memberof HandleRequest\r\n   * @param { string } fromCurrency - initiator\r\n   * @param { string } toCurrency - receiver\r\n   * @param { string } startDate\r\n   * @param { string } endDate\r\n   * @returns { promise } response - network response\r\n   */\r\n  fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate) {\r\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\r\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra&date=${startDate}&endDate=${endDate}`\r\n    return fetch(url)\r\n      .then((response) => {\r\n        if (!response) return;\r\n        return response\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  /**\r\n   * @method fetchConversionRates\r\n   * @description fetch conversion rates from newtork\r\n   * @memberof HandleRequest\r\n   * @param { string } fromCurrency - initiator\r\n   * @param { string } toCurrency - receiver\r\n   * @returns { promise } response - network response\r\n   */\r\n  fetchConversionRates(fromCurrency, toCurrency) {\r\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\r\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra`;\r\n    return fetch(url)\r\n      .then((response) => {\r\n        if (!response) return;\r\n        return response.json()\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n}\r\n\r\nexport default HandleRequest;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwdWJsaWMvanMvdmVuZG9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQ0FBOzs7OztJQUtNLGE7QUFDSiwyQkFBYztBQUFBOztBQUNaLFNBQUssT0FBTCxHQUFlLDhDQUFmO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7O3NDQU9rQjtBQUNoQixhQUFPLE1BQVMsS0FBSyxPQUFkLGtCQUNKLElBREksQ0FDQztBQUFBLGVBQVksU0FBUyxJQUFULEVBQVo7QUFBQSxPQURELEVBRUosS0FGSSxDQUVFO0FBQUEsZUFBUyxRQUFRLEdBQVIsQ0FBWSxLQUFaLENBQVQ7QUFBQSxPQUZGLENBQVA7QUFHRDs7QUFFRDs7Ozs7Ozs7Ozs7Ozt3Q0FVb0IsWSxFQUFjLFUsRUFBWSxTLEVBQVcsTyxFQUFTO0FBQ2hFLFVBQU0sUUFBVyxZQUFYLFNBQTJCLFVBQTNCLFNBQXlDLFVBQXpDLFNBQXVELFlBQTdEO0FBQ0EsVUFBTSxNQUFTLEtBQUssT0FBZCxtQkFBbUMsS0FBbkMsNEJBQStELFNBQS9ELGlCQUFvRixPQUExRjtBQUNBLGFBQU8sTUFBTSxHQUFOLEVBQ0osSUFESSxDQUNDLFVBQUMsUUFBRCxFQUFjO0FBQ2xCLFlBQUksQ0FBQyxRQUFMLEVBQWU7QUFDZixlQUFPLFFBQVA7QUFDRCxPQUpJLEVBS0osS0FMSSxDQUtFO0FBQUEsZUFBUyxRQUFRLEdBQVIsQ0FBWSxLQUFaLENBQVQ7QUFBQSxPQUxGLENBQVA7QUFNRDs7QUFFRDs7Ozs7Ozs7Ozs7eUNBUXFCLFksRUFBYyxVLEVBQVk7QUFDN0MsVUFBTSxRQUFXLFlBQVgsU0FBMkIsVUFBM0IsU0FBeUMsVUFBekMsU0FBdUQsWUFBN0Q7QUFDQSxVQUFNLE1BQVMsS0FBSyxPQUFkLG1CQUFtQyxLQUFuQyxtQkFBTjtBQUNBLGFBQU8sTUFBTSxHQUFOLEVBQ0osSUFESSxDQUNDLFVBQUMsUUFBRCxFQUFjO0FBQ2xCLFlBQUksQ0FBQyxRQUFMLEVBQWU7QUFDZixlQUFPLFNBQVMsSUFBVCxFQUFQO0FBQ0QsT0FKSSxFQUtKLEtBTEksQ0FLRTtBQUFBLGVBQVMsUUFBUSxHQUFSLENBQVksS0FBWixDQUFUO0FBQUEsT0FMRixDQUFQO0FBTUQ7Ozs7OztrQkFHWSxhIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqXHJcbiAqIEBjbGFzcyBIYW5kbGVSZXF1ZXN0XHJcbiAqIEBkZXNjcmlwdGlvbiBIYW5kbGUgdGhpcmQgcGFydHkgYmFzZWQgYXBpXHJcbiAqIEByZXR1cm5zIHsgbnVsbCB9XHJcbiAqL1xyXG5jbGFzcyBIYW5kbGVSZXF1ZXN0IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYmFzZVVybCA9ICdodHRwczovL2ZyZWUuY3VycmVuY3ljb252ZXJ0ZXJhcGkuY29tL2FwaS92NSc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIGZldGNoQ3VycmVuY2llc1xyXG4gICAqIEBkZXNjcmlwdGlvbiBmZXRjaCBjdXJyZW5jeSBmcm9tIG5ld3RvcmtcclxuICAgKiBAbWVtYmVyb2YgSGFuZGxlUmVxdWVzdFxyXG4gICAqIEBwYXJhbSB7IG51bGwgfVxyXG4gICAqIEByZXR1cm5zIHsgcHJvbWlzZSB9IHJlc3BvbnNlIC0gbmV0d29yayByZXNwb25zZVxyXG4gICAqL1xyXG4gIGZldGNoQ3VycmVuY2llcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLmJhc2VVcmx9L2N1cnJlbmNpZXNgKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIGZldGNoSGlzdG9yaWNhbERhdGFcclxuICAgKiBAZGVzY3JpcHRpb24gZmV0Y2ggY3VycmVuY3kgaGlzdG9yeSBmcm9tIG5ld3RvcmtcclxuICAgKiBAbWVtYmVyb2YgSGFuZGxlUmVxdWVzdFxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IGZyb21DdXJyZW5jeSAtIGluaXRpYXRvclxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IHRvQ3VycmVuY3kgLSByZWNlaXZlclxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IHN0YXJ0RGF0ZVxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IGVuZERhdGVcclxuICAgKiBAcmV0dXJucyB7IHByb21pc2UgfSByZXNwb25zZSAtIG5ldHdvcmsgcmVzcG9uc2VcclxuICAgKi9cclxuICBmZXRjaEhpc3RvcmljYWxEYXRhKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSwgc3RhcnREYXRlLCBlbmREYXRlKSB7XHJcbiAgICBjb25zdCBxdWVyeSA9IGAke2Zyb21DdXJyZW5jeX1fJHt0b0N1cnJlbmN5fSwke3RvQ3VycmVuY3l9XyR7ZnJvbUN1cnJlbmN5fWA7XHJcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9L2NvbnZlcnQ/cT0ke3F1ZXJ5fSZjb21wYWN0PXVsdHJhJmRhdGU9JHtzdGFydERhdGV9JmVuZERhdGU9JHtlbmREYXRlfWBcclxuICAgIHJldHVybiBmZXRjaCh1cmwpXHJcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2VcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgZmV0Y2hDb252ZXJzaW9uUmF0ZXNcclxuICAgKiBAZGVzY3JpcHRpb24gZmV0Y2ggY29udmVyc2lvbiByYXRlcyBmcm9tIG5ld3RvcmtcclxuICAgKiBAbWVtYmVyb2YgSGFuZGxlUmVxdWVzdFxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IGZyb21DdXJyZW5jeSAtIGluaXRpYXRvclxyXG4gICAqIEBwYXJhbSB7IHN0cmluZyB9IHRvQ3VycmVuY3kgLSByZWNlaXZlclxyXG4gICAqIEByZXR1cm5zIHsgcHJvbWlzZSB9IHJlc3BvbnNlIC0gbmV0d29yayByZXNwb25zZVxyXG4gICAqL1xyXG4gIGZldGNoQ29udmVyc2lvblJhdGVzKGZyb21DdXJyZW5jeSwgdG9DdXJyZW5jeSkge1xyXG4gICAgY29uc3QgcXVlcnkgPSBgJHtmcm9tQ3VycmVuY3l9XyR7dG9DdXJyZW5jeX0sJHt0b0N1cnJlbmN5fV8ke2Zyb21DdXJyZW5jeX1gO1xyXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfS9jb252ZXJ0P3E9JHtxdWVyeX0mY29tcGFjdD11bHRyYWA7XHJcbiAgICByZXR1cm4gZmV0Y2godXJsKVxyXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAoIXJlc3BvbnNlKSByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGFuZGxlUmVxdWVzdDsiXX0="}