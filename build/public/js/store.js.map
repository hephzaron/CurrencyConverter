{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","public/js/store.js","public/js/vendor.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"store.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\r\nimport HandleRequest from './vendor';\r\n\r\nconst handleRequest = new HandleRequest();\r\n\r\nexport const saveCurrencies = () => {\r\n  const dbPromise = idb.open('currencies-db', 1, (upgradeDb) => {\r\n    if (!upgradeDb.objectStoreNames.contains('currencies')) {\r\n      return upgradeDb.createObjectStore('currencies');\r\n    }\r\n  });\r\n\r\n  return dbPromise.then((db) => {\r\n    const fetchedResponse = handleRequest.fetchCurrencies();\r\n    return fetchedResponse.json().then((currencies) => {\r\n      if (!currencies.results) {\r\n        return Promise.reject('Currencies cannot be fetched from network')\r\n      }\r\n      const addCurrency = Object.keys(currencies.results).map((key) => {\r\n        const tx = db.transaction('currencies', 'readwrite');\r\n        const currencyStore = tx.objectStore('currencies');\r\n        currencyStore.put(currencies.results[key], key);\r\n        return tx.complete;\r\n      });\r\n      return Promise.resolve(addCurrency);\r\n    });\r\n  });\r\n}\r\n\r\nexport const saveCurrencyHistory = (data) => {\r\n  const { fromCurrency, toCurrency, startDate, endDate } = data;\r\n  const dbPromise = idb.open('currency-history-db', 1, (upgradeDb) => {\r\n    if (!upgradeDb.objectStoreNames.contains('history')) {\r\n      return upgradeDb.createObjectStore('history');\r\n    }\r\n  });\r\n  if (typeof data !== 'object' || !data) return;\r\n  return dbPromise.then((db) => {\r\n    const fetchedResponse = handleRequest\r\n      .fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate);\r\n    return fetchedResponse.then((data) => {\r\n      const historicalData = Object.keys(data).map((key) => {\r\n        const tx = db.transaction('history', 'readwrite');\r\n        const currencyHistoryStore = tx.objectStore('history');\r\n        currencyHistoryStore.put(data[key], key);\r\n        return tx.complete\r\n      });\r\n      return Promise.resolve(historicalData);\r\n    });\r\n  })\r\n}\r\n\r\nexport const saveCurrencyRates = (options) => {\r\n  const { amount, fromCurrency, toCurrency } = options;\r\n  const dbPromise = idb.open('currencies-rates-db', 1, (upgradeDb) => {\r\n    if (!upgradeDb.objectStoreNames.contains('currency-rates')) {\r\n      return upgradeDb.createObjectStore('currency-rates');\r\n    }\r\n  });\r\n  if (typeof options !== 'object' || !options) return;\r\n  return dbPromise.then((db) => {\r\n    const fetchedResponse = handleRequest.fetchConversionRates(fromCurrency, toCurrency);\r\n    return fetchedResponse.then((data) => {\r\n      const addCurrencyRates = Object.keys(data).map((key) => {\r\n        const tx = db.transaction('currency-rates', 'readwrite');\r\n        const currencyStore = tx.objectStore('currency-rates');\r\n        currencyStore.put(data[key], key);\r\n        return tx.complete\r\n      });\r\n      return Promise.resolve(addCurrencyRates);\r\n    });\r\n  })\r\n}\r\n\r\nexport const getCurrencies = () => {\r\n  const dbPromise = idb.open('currencies-db', 1);\r\n  return dbPromise.then((db) => {\r\n    const tx = db.transaction('currencies');\r\n    const currencyStore = tx.objectStore('currencies');\r\n    return currencyStore.getAll();\r\n  });\r\n}\r\n\r\nexport const getCurrencyRate = (fromCurrency, toCurrency) => {\r\n  console.log('fromCurrency', fromCurrency);\r\n  console.log('toCurrency', toCurrency);\r\n  const dbPromise = idb.open('currencies-rates-db', 1);\r\n  return dbPromise.then((db) => {\r\n    const tx = db.transaction('currency-rates');\r\n    const currencyRateStore = tx.objectStore('currency-rates');\r\n    const rate = currencyRateStore.get(`${fromCurrency}_${toCurrency}`);\r\n    return rate.then((res) => {\r\n      if (!res) return;\r\n      return res;\r\n    });\r\n  });\r\n}\r\n\r\nexport const getCurrencyHistory = (fromCurrency, toCurrency) => {\r\n  const dbPromise = idb.open('currency-history-db', 1);\r\n  return dbPromise.then((db) => {\r\n    const tx = db.transaction('history');\r\n    const currencyHistoryStore = tx.objectStore('history');\r\n    const result = currencyHistoryStore.get(`${fromCurrency}_${toCurrency}`);\r\n    return result.then((res) => {\r\n      if (!res) return;\r\n      return res\r\n    })\r\n  })\r\n}\r\n\r\nexport default {};","class HandleRequest {\r\n  constructor() {\r\n    this.baseUrl = 'https://free.currencyconverterapi.com/api/v5';\r\n  }\r\n\r\n  fetchCurrencies() {\r\n    return fetch(`${this.baseUrl}/currencies`)\r\n      .then(response => response)\r\n      .catch(error => console.log(error))\r\n  }\r\n\r\n  fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate) {\r\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\r\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra&date=${startDate}&endDate=${endDate}`\r\n    return fetch(url)\r\n      .then((response) => {\r\n        if (!response) return;\r\n        return response\r\n      })\r\n      .catch(error => console.log(error))\r\n  }\r\n}\r\n\r\nexport default HandleRequest;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}