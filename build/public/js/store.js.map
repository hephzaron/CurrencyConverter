{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","public/js/store.js","public/js/vendor.js"],"names":[],"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","file":"store.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\nimport HandleRequest from './vendor';\n\nconst handleRequest = new HandleRequest();\n\nexport const saveCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', 2, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('countries')) {\n      return upgradeDb.createObjectStore('countries');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCountries();\n    return fetchedResponse.then((countries) => {\n      if (!countries.results) {\n        return Promise.reject('Countries could not be fetched from network')\n      }\n      const addCountry = Object.keys(countries.results).map((key) => {\n        const tx = db.transaction('countries', 'readwrite');\n        const countryStore = tx.objectStore('countries');\n        countryStore.put(countries.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCountry);\n    });\n  });\n}\n\nexport const saveCurrencies = () => {\n  const dbPromise = idb.open('currency-converter-db', 2, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currencies')) {\n      return upgradeDb.createObjectStore('currencies');\n    }\n  });\n\n  return dbPromise.then((db) => {\n    const fetchedResponse = handleRequest.fetchCurrencies();\n    return fetchedResponse.then((currencies) => {\n      if (!currencies.results) {\n        return Promise.reject('Currencies cannot be fetched from network')\n      }\n      const addCurrency = Object.keys(currencies.results).map((key) => {\n        const tx = db.transaction('currencies', 'readwrite');\n        const currencyStore = tx.objectStore('currencies');\n        currencyStore.put(currencies.results[key], key);\n        return tx.complete;\n      });\n      return Promise.resolve(addCurrency);\n    });\n  });\n}\n\nexport const saveCurrencyRates = (options) => {\n  const dbPromise = idb.open('currency-converter-db', 3, (upgradeDb) => {\n    if (!upgradeDb.objectStoreNames.contains('currency-rates')) {\n      return upgradeDb.createObjectStore('currency-rates');\n    }\n  });\n  if (typeof options !== 'object' || !options) return;\n  return dbPromise.then((db) => {\n    const addCurrencyRates = Object.keys(options).map((key) => {\n      const tx = db.transaction('currency-rates', 'readwrite');\n      const currencyStore = tx.objectStore('currency-rates');\n      currencyStore.put(options[key], key);\n      return tx.complete\n    });\n    return Promise.resolve(addCurrencyRates);\n  })\n}\n\nexport const getCountries = () => {\n  const dbPromise = idb.open('currency-converter-db', 2);\n  return dbPromise.then(async(db) => {\n    const tx = db.transaction('countries');\n    const countryStore = tx.objectStore('countries');\n    return countryStore.getAll();\n  });\n}\n\nexport const getCurrencies = () => {\n  const dbPromise = idb.open('currency-converter-db', 2);\n  return dbPromise.then(async(db) => {\n    const tx = db.transaction('currencies');\n    const currencyStore = tx.objectStore('currencies');\n    return currencyStore.getAll();\n  });\n}\n\nexport const getCurrencyRate = (fromCurrency, toCurrency) => {\n  const dbPromise = idb.open('currency-converter-db');\n  return dbPromise.then((db) => {\n    let results = {};\n    const tx = db.transaction('currency-rates');\n    const currencyRateStore = tx.objectStore('currency-rates');\n    currencyRateStore.get(`${fromCurrency}_${toCurrency}`)\n      .onsuccess = (e) => {\n        results[`${fromCurrency}_${toCurrency}`] = e.target.result\n      };\n    currencyRateStore.get(`${toCurrency}_${fromCurrency}`)\n      .onsuccess = (e) => {\n        results[`${toCurrency}_${fromCurrency}`] = e.target.result\n      };\n    return results;\n  })\n}\n\nexport default {};","class HandleRequest {\n  constructor() {\n    this.baseUrl = 'https://free.currencyconverterapi.com/api/v5';\n  }\n\n  fetchCountries() {\n    return fetch(`${this.baseUrl}/countries`)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchCurrencies() {\n    return fetch(`${this.baseUrl}/currencies`)\n      .then((response) => {\n        if (!response) return;\n        return response.json();\n      })\n      .catch(error => console.log(error))\n  }\n\n  fetchHistoricalData(fromCurrency, toCurrency, startDate, endDate) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra&date=[${startDate}]&endDate=[${endDate}]`\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        return response.json()\n      })\n      .catch(error => console.log(error))\n  }\n\n  convertCurrency(amount, fromCurrency, toCurrency) {\n    const query = `${fromCurrency}_${toCurrency},${toCurrency}_${fromCurrency}`;\n    const url = `${this.baseUrl}/convert?q=${query}&compact=ultra`;\n    return fetch(url)\n      .then((response) => {\n        if (!response) return;\n        const data = response.json();\n        const fromValue = amount * parseFloat(data[`${fromCurrency}_${toCurrency}`]);\n        const toValue = amount * parseFloat(data[`${toCurrency}_${fromCurrency}`]);\n        return {\n          fromValue,\n          toValue,\n          data\n        }\n      })\n      .catch(error => console.log(error));\n  }\n}\n\nexport default HandleRequest;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}